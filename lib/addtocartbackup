import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter/material.dart';
import 'package:foodservice/product.dart';
import 'package:foodservice/services.dart';

// ignore: camel_case_types
class addtocartPage extends StatefulWidget {
  final String docId;
  // ignore: prefer_typing_uninitialized_variables
  final pincode;

  const addtocartPage({super.key, required this.docId, required this.pincode});

  @override
  // ignore: library_private_types_in_public_api
  _addtocartPageState createState() => _addtocartPageState();
}

// ignore: camel_case_types
class _addtocartPageState extends State<addtocartPage> {
  TextEditingController quantityController = TextEditingController();
  int quantity = 1;
  final TextEditingController _addonsController = TextEditingController();
  Map<String, Map<String, dynamic>> selectedAddons =
      {}; // Map to store add-ons with their details
  double totalAddons = 0.0;

  @override
  void initState() {
    super.initState();
    quantityController.text = quantity.toString();
  }

  void incrementQuantity() {
    setState(() {
      quantity++;
      quantityController.text = quantity.toString();
    });
  }

  void decrementQuantity() {
    if (quantity > 1) {
      setState(() {
        quantity--;
        quantityController.text = quantity.toString();
      });
    }
  }

  void addToTextField(String addonId, String addonName, String addonPrice) {
    setState(() {
      if (selectedAddons.containsKey(addonId)) {
        selectedAddons[addonId]!['quantity']++;
      } else {
        selectedAddons[addonId] = {
          'name': addonName,
          'price': addonPrice,
          'quantity': 1,
        };
      }
      _updateAddonsController();
      totalAddons += double.parse(addonPrice);
    });
  }

  void removeAddOn(String addonId) {
    setState(() {
      if (selectedAddons.containsKey(addonId)) {
        if (selectedAddons[addonId]!['quantity'] > 1) {
          selectedAddons[addonId]!['quantity']--;
          totalAddons -= double.parse(selectedAddons[addonId]!['price']);
        } else {
          totalAddons -= double.parse(selectedAddons[addonId]!['price']);
          selectedAddons.remove(addonId);
        }
        _updateAddonsController();
      }
    });
  }

  void _updateAddonsController() {
    List<String> addonsList = [];
    selectedAddons.forEach((id, details) {
      addonsList.add(
          '${details['name']} (x${details['quantity']}): \$${details['price']}');
    });
    _addonsController.text = addonsList.join('\n');
  }

  @override
  Widget build(BuildContext context) {
    double prodnameSize = 25;

    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: const Color(0xddc64a45),
          title: Row(
            children: [
              GestureDetector(
                child: const FaIcon(
                  FontAwesomeIcons.arrowLeft,
                  size: 23,
                  color: Colors.white,
                ),
                onTap: () {
                  Navigator.pop(context);
                },
              ),
            ],
          ),
        ),
        body: ListView(
          children: [
            Column(
              children: [
                StreamBuilder<DocumentSnapshot>(
                  stream: FirebaseFirestore.instance
                      .collection('product')
                      .doc(widget.docId)
                      .snapshots(),
                  builder: (context, snapshot) {
                    if (snapshot.hasData && snapshot.data != null) {
                      var doc = snapshot.data!;

                      String nameController = doc['name'];
                      String priceController = doc['price'];
                      String imageController = doc['image'];
                      String descriptionController = doc['description'];

                      return Column(
                        children: [
                          Container(
                            color: const Color(0xddc64a45),
                            alignment: Alignment.center,
                            padding: const EdgeInsets.symmetric(vertical: 5),
                            child: Image.network(
                              doc['image'],
                              errorBuilder: (context, error, stackTrace) {
                                return const Text('Failed to load image');
                              },
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.all(20),
                            child: Column(
                              children: [
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Container(
                                      alignment: Alignment.center,
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 5),
                                      child: Text(
                                        doc['name'],
                                        style: TextStyle(
                                            fontSize: prodnameSize,
                                            fontWeight: FontWeight.bold),
                                      ),
                                    ),
                                    Container(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 5),
                                      child: Row(
                                        children: [
                                          Text(
                                            "\$ ${doc['price']}",
                                            style: const TextStyle(
                                              color: Colors.green,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                                Text(
                                  doc['description'],
                                  style: TextStyle(
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.grey.shade400,
                                  ),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 15),
                          Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 25),
                            width: double.infinity,
                            decoration: const BoxDecoration(
                              color: Color.fromARGB(255, 244, 244, 244),
                            ),
                            child: const Text(
                              'Add-ons',
                              style: TextStyle(fontWeight: FontWeight.w800),
                            ),
                          ),
                          const SizedBox(height: 30),
                          StreamBuilder<QuerySnapshot>(
                            stream: FirebaseFirestore.instance
                                .collection('addons')
                                .where('productdocID', isEqualTo: widget.docId)
                                .snapshots(),
                            builder: (context, addonsSnapshot) {
                              if (addonsSnapshot.hasData &&
                                  addonsSnapshot.data != null &&
                                  addonsSnapshot.data!.docs.isNotEmpty) {
                                return Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children:
                                      addonsSnapshot.data!.docs.map((addonDoc) {
                                    String addonId = addonDoc.id;
                                    String addonName = addonDoc['name'];
                                    String addonPrice =
                                        addonDoc['price'].toString();
                                    double.parse(addonPrice);

                                    return Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      children: [
                                        GestureDetector(
                                          onTap: () {
                                            addToTextField(
                                                addonId, addonName, addonPrice);
                                          },
                                          child: Container(
                                              padding: const EdgeInsets.all(5),
                                              margin:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 5),
                                              decoration: BoxDecoration(
                                                  color:
                                                      const Color(0xddc64a45),
                                                  borderRadius:
                                                      BorderRadius.circular(5)),
                                              child: Row(
                                                children: [
                                                  Text(
                                                    '$addonName: \$ $addonPrice',
                                                    style: const TextStyle(
                                                        color: Colors.white,
                                                        fontSize: 12),
                                                  ),
                                                  const SizedBox(
                                                    width: 10,
                                                  ),
                                                  GestureDetector(
                                                    onTap: () {
                                                      removeAddOn(addonId);
                                                    },
                                                    child: Container(
                                                      padding:
                                                          const EdgeInsets.all(
                                                              5),
                                                      decoration: BoxDecoration(
                                                          color: Colors.red,
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(5)),
                                                      child: const Text(
                                                        'Remove',
                                                        style: TextStyle(
                                                            color: Colors.white,
                                                            fontSize: 12),
                                                      ),
                                                    ),
                                                  ),
                                                ],
                                              )),
                                        ),
                                      ],
                                    );
                                  }).toList(),
                                );
                              } else {
                                return const Text('No addons available');
                              }
                            },
                          ),
                          const SizedBox(height: 30),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            child: TextField(
                              controller: _addonsController,
                              readOnly: true,
                              maxLines: null,
                              decoration: const InputDecoration(
                                labelText: 'Selected Addons',
                                border: OutlineInputBorder(),
                              ),
                            ),
                          ),
                          const SizedBox(height: 30),
                          Container(
                            padding: EdgeInsets.symmetric(
                                horizontal:
                                    0.3 * MediaQuery.of(context).size.width,
                                vertical:
                                    0.03 * MediaQuery.of(context).size.height),
                            decoration: const BoxDecoration(
                              color: Color.fromARGB(255, 244, 244, 244),
                            ),
                            child: Container(
                              alignment: Alignment.bottomCenter,
                              margin: const EdgeInsets.all(5),
                              padding: const EdgeInsets.all(10),
                              decoration: BoxDecoration(
                                  color: const Color(0xddc64a45),
                                  borderRadius: BorderRadius.circular(20)),
                              child: GestureDetector(
                                onTap: () {
                                  Services()
                                      .addtocart(
                                          nameController,
                                          priceController,
                                          quantityController.text,
                                          imageController,
                                          widget.docId,
                                          widget.pincode,
                                          descriptionController,
                                          _addonsController.text,
                                          totalAddons.toString())
                                      .then((value) {
                                    // Show the SnackBar
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        backgroundColor: Colors.green,
                                        content:
                                            Text('Successfully Added to Cart'),
                                      ),
                                    );

                                    // Wait for 2 seconds before navigating
                                    Future.delayed(const Duration(seconds: 2),
                                        () {
                                      Navigator.pushReplacement(
                                        context,
                                        MaterialPageRoute(
                                            builder: (context) => productPage(
                                                pincode: widget
                                                    .pincode)), // Replace MenuScreen with your actual menu screen widget
                                      );
                                    });
                                  });
                                },
                                child: const Text(
                                  'Add To Cart',
                                  style: TextStyle(
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold,
                                      fontSize: 17),
                                ),
                              ),
                            ),
                          ),
                        ],
                      );
                    } else {
                      return const Center(child: CircularProgressIndicator());
                    }
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
