// import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

// import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:foodservice/product.dart';
import 'package:foodservice/services.dart';
// import 'package:foodservice/services.dart'; // Replace with your service import

// ignore: camel_case_types
class addtocartPage extends StatefulWidget {
  final String docId;
  // ignore: prefer_typing_uninitialized_variables
  final pincode;

  const addtocartPage({super.key, required this.docId, required this.pincode});

  @override
  // ignore: library_private_types_in_public_api
  _addtocartPageState createState() => _addtocartPageState();
}

// ignore: camel_case_types
class _addtocartPageState extends State<addtocartPage> {
  TextEditingController quantityController = TextEditingController();

  int quantity = 1;

  @override
  void initState() {
    super.initState();
    quantityController.text =
        quantity.toString(); // Initialize text controller with initial quantity
  }

  void incrementQuantity() {
    setState(() {
      quantity++;
      quantityController.text = quantity.toString();
    });
  }

  void decrementQuantity() {
    if (quantity > 1) {
      setState(() {
        quantity--;
        quantityController.text = quantity.toString();
      });
    }
  }

  TextEditingController _addonsController = TextEditingController();
  List<String> selectedAddons = [];
  double totalAddons = 0.0;

  void addToTextField(String addonName, String addonPrice) {
    String addonToAdd = '$addonName: \$ $addonPrice';
    if (!selectedAddons.contains(addonToAdd)) {
      setState(() {
        selectedAddons.add(addonToAdd);
        _addonsController.text =
            selectedAddons.join('\n'); // Join addons with new lines
        totalAddons += double.parse(
            addonPrice); // Parse addonPrice to double and update total addons
      });
    } else {
      // Optionally, you can provide feedback that the addon is already selected
      print('$addonToAdd is already added.');
    }
  }

  @override
  Widget build(BuildContext context) {
    double deviceWidth = MediaQuery.of(context).size.width;
    double prodnameSize = 0;
    if (deviceWidth <= 320) {
      prodnameSize = 15;
    } else if (deviceWidth <= 360) {
      prodnameSize = 15;
    } else if (deviceWidth <= 412) {
      prodnameSize = 20;
    } else if (deviceWidth <= 480) {
      prodnameSize = 25; // Default size for smaller devices
    } else if (deviceWidth <= 600) {
      prodnameSize = 25; // Default size for smaller devices
    } else if (deviceWidth <= 900) {
      prodnameSize = 25; // Default size for smaller devices
    }

    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: ScaffoldMessenger(
        child: Scaffold(
          appBar: AppBar(
            backgroundColor: const Color(0xddc64a45),
            title: Row(
              children: [
                GestureDetector(
                  child: const FaIcon(
                    FontAwesomeIcons.arrowLeft,
                    size: 23,
                    color: Colors.white,
                  ),
                  onTap: () {
                    Navigator.pop(context);
                  },
                ),
              ],
            ),
          ),
          body: ListView(
            children: [
              Column(
                children: [
                  StreamBuilder<DocumentSnapshot>(
                    stream: FirebaseFirestore.instance
                        .collection('product')
                        .doc(widget.docId)
                        .snapshots(),
                    builder: (context, snapshot) {
                      if (snapshot.hasData && snapshot.data != null) {
                        var doc = snapshot.data!;

                        String nameController = doc['name'];
                        TextEditingController nameController0 =
                            TextEditingController(text: nameController);

                        String priceController = doc['price'];
                        TextEditingController priceController0 =
                            TextEditingController(text: priceController);

                        String imageController = doc['image'];
                        TextEditingController imageController0 =
                            TextEditingController(text: imageController);

                        String descriptionController = doc['description'];

                        // Fetch addons subcollection

                        return Column(
                          children: [
                            Column(
                              children: [
                                Container(
                                  color: const Color(0xddc64a45),
                                  alignment: Alignment.center,
                                  padding:
                                      const EdgeInsets.symmetric(vertical: 5),
                                  child: Image.network(
                                    doc['image'],
                                    errorBuilder: (context, error, stackTrace) {
                                      return const Text('Failed to load image');
                                    },
                                  ),
                                ),
                                Container(
                                  padding: const EdgeInsets.all(20),
                                  child: Column(
                                    children: [
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Container(
                                            alignment: Alignment.center,
                                            padding: const EdgeInsets.symmetric(
                                                vertical: 5),
                                            child: Text(
                                              doc['name'],
                                              style: TextStyle(
                                                  fontSize: prodnameSize,
                                                  fontWeight: FontWeight.bold),
                                            ),
                                          ),
                                          Container(
                                            padding: const EdgeInsets.symmetric(
                                                vertical: 5),
                                            child: Row(
                                              children: [
                                                Text(
                                                  "\$ ${doc['price']}",
                                                  style: const TextStyle(
                                                    color: Colors.green,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ), // Replace with your actual price variable
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                      Text(
                                        doc['description'],
                                        style: TextStyle(
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.grey.shade400,
                                        ),
                                      ),
                                    ],
                                  ),
                                )
                              ],
                            ),
                            Visibility(
                              visible: false,
                              child: TextField(
                                controller: quantityController,
                                decoration: const InputDecoration(
                                  labelText: 'Quantity',
                                ),
                              ),
                            ),
                            Visibility(
                              visible: false,
                              child: TextField(controller: nameController0),
                            ),
                            Visibility(
                              visible: false,
                              child: TextField(controller: priceController0),
                            ),
                            Visibility(
                              visible: false,
                              child: TextField(controller: imageController0),
                            ),
                            const SizedBox(
                              height: 15,
                            ),
                            Container(
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 20, vertical: 25),
                              width: double.infinity,
                              decoration: const BoxDecoration(
                                color: Color.fromARGB(255, 244, 244, 244),
                              ),
                              child: const Text(
                                'Add-ons',
                                style: TextStyle(fontWeight: FontWeight.w800),
                              ),
                            ),
                            const SizedBox(
                              height: 30,
                            ),
                            StreamBuilder<QuerySnapshot>(
                              stream: FirebaseFirestore.instance
                                  .collection('addons')
                                  .where('productdocID',
                                      isEqualTo: widget.docId)
                                  .snapshots(),
                              builder: (context, addonsSnapshot) {
                                if (addonsSnapshot.hasData &&
                                    addonsSnapshot.data != null &&
                                    addonsSnapshot.data!.docs.isNotEmpty) {
                                  return Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: addonsSnapshot.data!.docs
                                        .map((addonDoc) {
                                      String addonName = addonDoc['name'];
                                      String addonPrice =
                                          addonDoc['price'].toString();

                                      return GestureDetector(
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          children: [
                                            GestureDetector(
                                              onTap: () {
                                                addToTextField(addonName,
                                                    addonPrice); // Replace with actual addon data
                                              },
                                              child: Container(
                                                padding: EdgeInsets.all(5),
                                                decoration: BoxDecoration(
                                                    color: Color(0xddc64a45),
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5)),
                                                child: Text(
                                                  '$addonName: \$ $addonPrice',
                                                  style: TextStyle(
                                                      color: Colors.white,
                                                      fontSize: 12),
                                                ),
                                              ),
                                            ),
                                            const SizedBox(
                                              width: 20,
                                            ),
                                          ],
                                        ),
                                      );
                                    }).toList(),
                                  );
                                } else {
                                  return const Text('No addons available');
                                }
                              },
                            ),
                            const SizedBox(
                              height: 30,
                            ),
                            Container(
                              padding: EdgeInsets.symmetric(horizontal: 20),
                              child: TextField(
                                controller: _addonsController,
                                readOnly: true,
                                maxLines: null, // Allow multiple lines of text
                                decoration: InputDecoration(
                                  labelText: 'Selected Addons',
                                  border: OutlineInputBorder(),
                                ),
                              ),
                            ),
                            const SizedBox(
                              height: 30,
                            ),
                            Container(
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 20, vertical: 25),
                              width: double.infinity,
                              decoration: const BoxDecoration(
                                color: Color.fromARGB(255, 244, 244, 244),
                              ),
                              child: const Text(
                                'Select Quantity',
                                style: TextStyle(fontWeight: FontWeight.w800),
                              ),
                            ),
                            const SizedBox(
                              height: 30,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                GestureDetector(
                                  onTap: decrementQuantity,
                                  child: const FaIcon(
                                    // ignore: deprecated_member_use
                                    FontAwesomeIcons.minusCircle,
                                    color: Color(0xddc64a45),
                                  ),
                                ),
                                const SizedBox(
                                  width: 20,
                                ),
                                Text(
                                  '$quantity',
                                  style: const TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.w800),
                                ),
                                const SizedBox(
                                  width: 20,
                                ),
                                GestureDetector(
                                  onTap: incrementQuantity,
                                  child: const FaIcon(
                                    // ignore: deprecated_member_use
                                    FontAwesomeIcons.plusCircle,
                                    color: Color(0xddc64a45),
                                  ),
                                )
                              ],
                            ),
                            const SizedBox(
                              height: 30,
                            ),
                            Container(
                              padding: EdgeInsets.symmetric(
                                  horizontal:
                                      0.3 * MediaQuery.of(context).size.width,
                                  vertical: 0.03 *
                                      MediaQuery.of(context).size.height),
                              decoration: const BoxDecoration(
                                color: Color.fromARGB(255, 244, 244, 244),
                              ),
                              child: Container(
                                alignment: Alignment.bottomCenter,
                                margin: const EdgeInsets.all(5),
                                padding: const EdgeInsets.all(10),
                                decoration: BoxDecoration(
                                    color: const Color(0xddc64a45),
                                    borderRadius: BorderRadius.circular(20)),
                                child: GestureDetector(
                                  onTap: () {
                                    Services()
                                        .addtocart(
                                            nameController,
                                            priceController,
                                            quantityController.text,
                                            imageController,
                                            widget.docId,
                                            widget.pincode,
                                            descriptionController,
                                            _addonsController.text,
                                            totalAddons.toString())
                                        .then((value) {
                                      // Show the SnackBar
                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(
                                        SnackBar(
                                          backgroundColor: Colors.green,
                                          content: Text(
                                              'Successfully Added to Cart'),
                                        ),
                                      );

                                      // Wait for 2 seconds before navigating
                                      Future.delayed(Duration(seconds: 2), () {
                                        Navigator.pushReplacement(
                                          context,
                                          MaterialPageRoute(
                                              builder: (context) => productPage(
                                                  pincode: widget
                                                      .pincode)), // Replace MenuScreen with your actual menu screen widget
                                        );
                                      });
                                    });
                                  },
                                  child: const Text(
                                    'Add To Cart',
                                    style: TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold,
                                        fontSize: 17),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        );
                      } else {
                        return const Text('NO DATA');
                      }
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
